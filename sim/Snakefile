shell.executable("/bin/bash")
shell.prefix("source ~/.bashrc; ")

SIMS, = glob_wildcards("sims/{sim}.sim")
FORMATS = ["mrlocus","mrlocus_p1e-4","ecav-mrlocus"]

ts = "/proj/milovelab/love/bin/twas_sim"
plink = "/proj/milovelab/bin/plink/plink"
okg = "/proj/milovelab/anno/1000G_EUR_Phase3_plink"
dap = "/proj/milovelab/love/bin/dap/dap_src/dap-g"
ptwas = "/proj/milovelab/love/bin/ptwas/PTWAS_est/PTWAS_est"

rule all:
    input: 
        expand("out/{sim}.{ext}", sim=SIMS, ext=FORMATS),

rule sample_genes:
    input:
        "sims/{type}/{type}_{rep}r_{nqtl}nq_{model}m_{h2g}h2_{ve}ve.sim"
    output:
        list = "out/{type}/{type}_{rep}r_{nqtl}nq_{model}m_{h2g}h2_{ve}ve.gene.list",
        txt = "out/{type}/{type}_{rep}r_{nqtl}nq_{model}m_{h2g}h2_{ve}ve.locus.txt"
    shell:
        "python {ts}/sample_genes.py {ts}/ind_loci.bed {ts}/glist-hg19.nodupe.autosome "
        "-l 5 -u 20 -o {output.list} --loc_output {output.txt} "
        "--seed {wildcards.rep}"

rule twas_sim_plink:
    input:
        "out/{locus}.locus.txt"
    output:
        "out/{locus}.bed"
    params:
        path = "out/{locus}"
    shell:
        """
        numchr=$(cut -d ' ' -f 1 {input} | sed 's/chr//')
        locus_start=$(cut -d ' ' -f 2 {input})
        locus_stop=$(cut -d ' ' -f 3 {input})
        {plink} --bfile {okg}/1000G.EUR.QC.$numchr --chr $numchr \
        --from-bp $locus_start --to-bp $locus_stop --make-bed \
        --out {params.path} --snps-only --hwe midp 1e-5 \
        --geno 0.01 --maf 0.01 --allow-no-sex --memory 2048 \
        --keep {ts}/EUR.samples --extract {ts}/HAPMAP_SNPS/hm.$numchr.snp --silent
        """

rule sim:
    input:
        "out/{type}/{type}_{rep}r_{nqtl}nq_{model}m_{h2g}h2_{ve}ve.bed"
    output:
        "out/{type}/{type}_{rep}r_{nqtl}nq_{model}m_{h2g}h2_{ve}ve.scan.tsv"
    params:
        path = "out/{type}/{type}_{rep}r_{nqtl}nq_{model}m_{h2g}h2_{ve}ve"
    shell:
        """
        conda activate twas_sim
        python {ts}/sim.py {params.path} --ngwas 100000 \
        --nqtl {wildcards.nqtl} \
        --model {wildcards.model} \
        --eqtl-h2 {wildcards.h2g} \
        --var-explained {wildcards.ve} \
        --output {params.path} \
        --seed {wildcards.rep}
        """

rule ld:
     input:
         "out/{locus}.bed"
     output:
         "out/{locus}.ld"
     params:
        path = "out/{locus}"
     shell:
         "{plink} --bfile {params.path} --r square --keep-allele-order \
          --memory 2048 --out {params.path} --silent"

rule dap:
    input:
        scan = "out/{type}/{type}_{rep}r_{nqtl}nq_{model}m_{h2g}h2_{ve}ve.scan.tsv",
        ld = "out/{type}/{type}_{rep}r_{nqtl}nq_{model}m_{h2g}h2_{ve}ve.ld"
    output:
        "out/{type}/{type}_{rep}r_{nqtl}nq_{model}m_{h2g}h2_{ve}ve.dap"
    params:
        path = "out/{type}/{type}_{rep}r_{nqtl}nq_{model}m_{h2g}h2_{ve}ve"
    benchmark:
        "bench/{type}/{type}_{rep}r_{nqtl}nq_{model}m_{h2g}h2_{ve}ve_dap.bench"
    shell:
        """
        tail -n +2 {input.scan} | awk '{{ print $2,$11,$12 }}' > {params.path}.eqtl
        {dap} -d_est {params.path}.eqtl -d_ld {input.ld} \
        -d_n {wildcards.nqtl} -d_syy {wildcards.nqtl} --output_all \
        -o {output} -l {params.path}.dap.log || true
        """

rule ptwas:
    input:
        scan = "out/{locus}.scan.tsv",
        dap = "out/{locus}.dap"
    output:
        eqtl2 = "out/{locus}.eqtl2",
        eqtlgwas = "out/{locus}.eqtl.gwas",
        ptwas = "out/{locus}.ptwas"
    benchmark:
        "bench/{locus}_ptwas.bench"
    shell:
        """
        if [[ -s {input.dap} ]]
        then
          grep '((' {input.dap} | awk '{{ if ($5 != -1) print $2,$5,$3,$6,$7}}' | sort -nk2 > {output.eqtl2}
          Rscript -e 'x <- read.table("{output.eqtl2}"); y <- read.delim("{input.scan}"); write.table(cbind(x, y[match(x$V1,y$snp),c("gwas.beta","gwas.se")]), file="{output.eqtlgwas}", quote=FALSE, col.names=FALSE, row.names=FALSE)'
          {ptwas} -d {output.eqtlgwas} --cluster_info > {output.ptwas}
        else
          echo "0	0	0	0	0	0" > {output.ptwas}
        fi
        """

rule ptwas_low_spip:
    input:
        dap = "out/{locus}.dap",
        eqtlgwas = "out/{locus}.eqtl.gwas"        
    output:
        "out/{locus}.ptwas_t0.1"
    shell:
        """
        if [[ -s {input.dap} ]]
        then
          {ptwas} -d {input.eqtlgwas} --cluster_info -t 0.1 > {output}
        else
          echo "0	0	0	0	0	0" > {output}
        fi
        """

rule clump:
    input:
        "out/{locus}.scan.tsv"
    output:
        clumped = "out/{locus}.clumped",
        scan_p = "out/{locus}.scan.p.tsv"
    params:
        path = "out/{locus}",
    benchmark:
        "bench/{locus}_clump.bench"
    shell:
        """
        Rscript -e 'y <- read.delim("{input}"); y$eqtl.p <- 2*pnorm(abs(y$eqtl.beta/y$eqtl.se),lower.tail=FALSE); write.table(y, file="{output.scan_p}", quote=FALSE, row.names=FALSE, sep="\\t")'
        {plink} --bfile {params.path} --clump {output.scan_p} --clump-snp-field snp \
        --clump-p1 0.001 --clump-p2 1 --clump-r2 0.1 --clump-kb 500 \
        --clump-field eqtl.p --out {params.path} --silent
        """

rule clump_low_p:
    input:
        clumped = "out/{locus}.clumped",
        scan_p = "out/{locus}.scan.p.tsv"
    output:
        "out/{locus}_p1e-4.clumped"
    params:
        path = "out/{locus}",
    shell:
        """
        cat {input.clumped} | tr -s ' ' | cut -d ' ' -f6 | head -n -2 | tail -n +2 | awk '$1 < .0001' > {params.path}_p1e-4
        if [[ -s {params.path}_p1e-4 ]]
        then
          {plink} --bfile {params.path} --clump {input.scan_p} --clump-snp-field snp --clump-p1 0.0001 --clump-p2 1 --clump-r2 0.1 --clump-kb 500 --clump-field eqtl.p --out {params.path}_p1e-4 --silent
        else
          touch {params.path}_p1e-4.clumped
        fi
        """

rule twmr:
    input:
        clump = "out/{locus}.clumped",
        scan = "out/{locus}.scan.tsv",
        ld = "out/{locus}.ld"
    output:
        "out/{locus}.twmr"
    benchmark:
        "bench/{locus}_twmr.bench"
    shell:
        "R CMD BATCH --no-save --no-restore '--args {input.clump} {input.scan} " 
        "{input.ld} {output}' twmr.R"

rule twmr_low_p:
    input:
        clump = "out/{locus}_p1e-4.clumped",
        scan = "out/{locus}.scan.tsv",
        ld = "out/{locus}.ld"
    output:
        "out/{locus}.twmr_p1e-4"
    shell:
        """
        if [[ -s {input.clump} ]]
        then
          R CMD BATCH --no-save --no-restore '--args {input.clump} {input.scan} {input.ld} {output}' twmr.R
        else
          touch {output}
        fi
        """

rule ecaviar:
    input:
        clump = "out/{locus}.clumped",
        scan = "out/{locus}.scan.tsv",
        ld = "out/{locus}.ld"
    output:
        "out/{locus}.ecav"
    shell:
        "R CMD BATCH --no-save --no-restore '--args {input.clump} {input.scan} " 
        "{input.ld} {output}' ecaviar.R"

# rule ldamregger:
#     input:
#         scan = "out/{locus}.scan.tsv",
#         ld = "out/{locus}.ld"
#     output:
#         "out/{locus}.ldamregger"
#     shell:
#         "R CMD BATCH --no-save --no-restore '--args {input.scan} " 
#         "{input.ld} {output}' lda_mr_egger.R"

# rule pmr:
#     input:
#         scan = "out/{locus}.scan.tsv",
#         ld = "out/{locus}.ld"
#     output:
#         "out/{locus}.pmr"
#     shell:
#         "R CMD BATCH --no-save --no-restore '--args {input.scan} "
#         "{input.ld} {output}' pmr_summary_egger.R"

rule mrlocus:
    input:
        clump = "out/{locus}.clumped",
        scan = "out/{locus}.scan.tsv",
        ld = "out/{locus}.ld"
    output:
        mrl = "out/{locus}.mrlocus",
        keep = "out/{locus}.mrl_keep"
    benchmark:
        "bench/{locus}_mrlocus.bench"
    shell:
        "R CMD BATCH --no-save --no-restore '--args {input.clump} {input.scan} " 
        "{input.ld} {output.mrl}' mrlocus.R"

rule mrlocus_low_p:
    input:
        clump = "out/{locus}_p1e-4.clumped",
        scan = "out/{locus}.scan.tsv",
        ld = "out/{locus}.ld"
    output:
        "out/{locus}.mrlocus_p1e-4"
    shell:
        """
        if [[ -s {input.clump} ]]
        then
          R CMD BATCH --no-save --no-restore '--args {input.clump} {input.scan} {input.ld} {output}' mrlocus.R
        else
          touch {output}
        fi
        """

rule ecaviar_mrlocus:
    input:
        clump = "out/{locus}.clumped",
        scan = "out/{locus}.scan.tsv",
        keep = "out/{locus}.mrl_keep",
        ecav = "out/{locus}.ecav"
    output:
        "out/{locus}.ecav-mrlocus"
    benchmark:
        "bench/{locus}_ecav-mrlocus.bench"
    shell:
        "R CMD BATCH --no-save --no-restore '--args {input.clump} {input.scan} " 
        "{input.keep} {input.ecav} {output}' ecaviar-mrlocus.R"

rule collate:
    input:
        scan = "out/{locus}.scan.tsv",
	twmr = "out/{locus}.twmr",
	twmr2 = "out/{locus}.twmr_p1e-4",
	ptwas = "out/{locus}.ptwas",
	ptwas2 = "out/{locus}.ptwas_t0.1",
	mrlocus = "out/{locus}.mrlocus",
	mrlocus2 = "out/{locus}.mrlocus_p1e-4",
	ecav_mrlocus = "out/{locus}.ecav-mrlocus"
    output:
        "out/{locus}.final"
    shell:
        "R CMD BATCH --no-save --no-restore '--args {input.scan} {input.twmr} {input.twmr2} " 
        "{input.ptwas} {input.ptwas2} {input.mrlocus} {input.mrlocus2} "
        "{input.ecav_mrlocus} {output}' collate.R"
