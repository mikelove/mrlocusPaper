SIMS, = glob_wildcards("sim/{sim}.sim")
FORMATS = ["final"]

ts = "/proj/milovelab/love/bin/twas_sim"
plink = "/proj/milovelab/bin/plink/plink"
okg = "/proj/milovelab/anno/1000G_EUR_Phase3_plink"
dap = "/proj/milovelab/love/bin/dap/dap_src/dap-g"
ptwas = "/proj/milovelab/love/bin/ptwas/PTWAS_est/PTWAS_est"

rule all:
    input: 
        expand("out/{sim}.{ext}", sim=SIMS, ext=FORMATS),

rule sample_genes:
    input:
        "sim/{rep}_{model}model_{h2g}h2g_{ve}ve.sim"
    output:
        list = "out/{rep}_{model}model_{h2g}h2g_{ve}ve.gene.list",
        txt = "out/{rep}_{model}model_{h2g}h2g_{ve}ve.locus.txt"
    shell:
        "python {ts}/sample_genes.py {ts}/ind_loci.bed {ts}/glist-hg19.nodupe.autosome "
        "-l 5 -u 20 -o {output.list} --loc_output {output.txt} "
        "--seed {wildcards.rep}"

rule twas_sim_plink:
    input:
        "out/{locus}.locus.txt"
    output:
        "out/{locus}.bed"
    params:
        path = "out/{locus}"
    shell:
        """
        numchr=$(cut -d ' ' -f 1 {input} | sed 's/chr//')
        locus_start=$(cut -d ' ' -f 2 {input})
        locus_stop=$(cut -d ' ' -f 3 {input})
        {plink} --bfile {okg}/1000G.EUR.QC.$numchr --chr $numchr \
        --from-bp $locus_start --to-bp $locus_stop --make-bed \
        --out {params.path} --snps-only --hwe midp 1e-5 \
        --geno 0.01 --maf 0.01 --allow-no-sex --memory 2048 \
        --keep {ts}/EUR.samples --extract {ts}/HAPMAP_SNPS/hm.$numchr.snp --silent
        """

rule sim:
    input:
        "out/{rep}_{model}model_{h2g}h2g_{ve}ve.bed"
    output:
        "out/{rep}_{model}model_{h2g}h2g_{ve}ve.scan.tsv"
    params:
        path = "out/{rep}_{model}model_{h2g}h2g_{ve}ve"
    shell:
        "python {ts}/sim.py {params.path} --ngwas 100000 --nqtl 1000 --model {wildcards.model} "
        "--eqtl-h2 {wildcards.h2g} --var-explained {wildcards.ve} --output {params.path} "
        "--seed {wildcards.rep}"

rule add_p:
    input:
        "out/{locus}.scan.tsv"
    output:
        "out/{locus}.scan.p.tsv"
    shell:
        """
        Rscript -e 'y <- read.delim("{input}"); y$eqtl.p <- 2*pnorm(abs(y$eqtl.beta/y$eqtl.se),lower.tail=FALSE); write.table(y, file="{output}", quote=FALSE, row.names=FALSE, sep="\\t")'
        """

rule ld:
     input:
         "out/{locus}.bed"
     output:
         "out/{locus}.ld"
     params:
        path = "out/{locus}"
     shell:
         "{plink} --bfile {params.path} --r square --keep-allele-order \
          --memory 2048 --out {params.path} --silent"

rule dap:
    input:
        scan = "out/{locus}.scan.tsv",
        ld = "out/{locus}.ld"
    output:
        "out/{locus}.dap"
    params:
        path = "out/{locus}"
    shell:
        """
        tail -n +2 {input.scan} | awk '{{ print $2,$11,$12 }}' > {params.path}.eqtl
        {dap} -d_est {params.path}.eqtl -d_ld {input.ld} \
        -d_n 1000 -d_syy 1000 --output_all \
        -o {output} -l {params.path}.dap.log || true
        """

rule ptwas:
    input:
        scan = "out/{locus}.scan.tsv",
        dap = "out/{locus}.dap"
    output:
        "out/{locus}.ptwas"
    params:
        path = "out/{locus}"
    shell:
        """
        grep '((' {input.dap} | awk '{{ if ($5 != -1) print $2,$5,$3,$6,$7}}' | sort -nk2 > {params.path}.eqtl2
        Rscript -e 'x <- read.table("{params.path}.eqtl2"); y <- read.delim("{input.scan}"); write.table(cbind(x, y[match(x$V1,y$snp),c("gwas.beta","gwas.se")]), file="{params.path}.eqtl.gwas", quote=FALSE, col.names=FALSE, row.names=FALSE)'
        {ptwas} -d {params.path}.eqtl.gwas --cluster_info > {output}
        """

rule clump:
    input:
        "out/{locus}.scan.p.tsv"
    output:
        "out/{locus}.clumped"
    params:
        path = "out/{locus}"
    shell:
        "{plink} --bfile {params.path} --clump {input} --clump-snp-field snp \
        --clump-p1 0.001 --clump-p2 1 --clump-r2 0.2 --clump-kb 500 \
        --clump-field eqtl.p --out {params.path} --silent"

rule twmr:
    input:
        clump = "{locus}.clumped",
        scan = "{locus}.scan.tsv",
        ld = "{locus}.ld"
    output:
        "{locus}.twmr"
    shell:
        "R CMD BATCH --no-save --no-restore '--args {input.clump} {input.scan} " 
        "{input.ld} {output}' twmr.R"

rule mrlocus:
    input:
        clump = "{locus}.clumped",
        scan = "{locus}.scan.tsv",
        ld = "{locus}.ld"
    output:
        "{locus}.mrlocus"
    shell:
        "R CMD BATCH --no-save --no-restore '--args {input.clump} {input.scan} " 
        "{input.ld} {output}' mrlocus.R"

rule collate:
    input:
        scan = "{locus}.scan.tsv",
	twmr = "{locus}.twmr",
	ptwas = "{locus}.ptwas",
	mrlocus = "{locus}.mrlocus",
    output:
        "{locus}.final"
    shell:
        "R CMD BATCH --no-save --no-restore '--args {input.scan} {input.twmr} " 
        "{input.ptwas} {input.mrlocus} {output}' collate.R"
